{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "faq-with-spiral",
  "type": "registry:block",
  "title": "FAQ with Spiral",
  "description": "Interactive FAQ with animated golden spiral background, search functionality, and customizable controls",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/default/faq-with-spiral.tsx",
      "content": "\"use client\"\n\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\n\nexport default function FAQWithSpiral() {\n  const spiralRef = useRef<HTMLDivElement | null>(null);\n  const [panelOpen, setPanelOpen] = useState(false);\n  const [query, setQuery] = useState(\"\");\n\n  // Spiral configuration\n  const [cfg, setCfg] = useState({\n    points: 700,\n    dotRadius: 1.8,\n    duration: 3.0,\n    color: \"#ffffff\",\n    gradient: \"none\" as\n      | \"none\"\n      | \"rainbow\"\n      | \"sunset\"\n      | \"ocean\"\n      | \"fire\"\n      | \"neon\"\n      | \"pastel\"\n      | \"grayscale\",\n    pulseEffect: true,\n    opacityMin: 0.25,\n    opacityMax: 0.9,\n    sizeMin: 0.5,\n    sizeMax: 1.4,\n    background: \"#000000\",\n  });\n\n  // Gradient presets\n  const gradients: Record<string, string[]> = useMemo(\n    () => ({\n      none: [],\n      rainbow: [\"#ff0000\", \"#ff9900\", \"#ffff00\", \"#00ff00\", \"#0099ff\", \"#6633ff\"],\n      sunset: [\"#ff0000\", \"#ff9900\", \"#ffcc00\"],\n      ocean: [\"#0066ff\", \"#00ccff\", \"#00ffcc\"],\n      fire: [\"#ff0000\", \"#ff6600\", \"#ffcc00\"],\n      neon: [\"#ff00ff\", \"#00ffff\", \"#ffff00\"],\n      pastel: [\"#ffcccc\", \"#ccffcc\", \"#ccccff\"],\n      grayscale: [\"#ffffff\", \"#999999\", \"#333333\"],\n    }),\n    []\n  );\n\n  // Keyboard shortcuts\n  useEffect(() => {\n    const onKey = (e: KeyboardEvent) => {\n      const k = e.key.toLowerCase();\n      if (k === \"h\") setPanelOpen((v) => !v);\n      if (k === \"r\") randomize();\n    };\n    window.addEventListener(\"keydown\", onKey);\n    return () => window.removeEventListener(\"keydown\", onKey);\n  }, []);\n\n  // Generate spiral SVG and mount\n  useEffect(() => {\n    if (!spiralRef.current) return;\n\n    const SIZE = 560; // larger presence\n    const GOLDEN_ANGLE = Math.PI * (3 - Math.sqrt(5));\n    const N = cfg.points;\n    const DOT = cfg.dotRadius;\n    const CENTER = SIZE / 2;\n    const PADDING = 4;\n    const MAX_R = CENTER - PADDING - DOT;\n\n    const svgNS = \"http://www.w3.org/2000/svg\";\n    const svg = document.createElementNS(svgNS, \"svg\");\n    svg.setAttribute(\"width\", String(SIZE));\n    svg.setAttribute(\"height\", String(SIZE));\n    svg.setAttribute(\"viewBox\", `0 0 ${SIZE} ${SIZE}`);\n\n    // Gradient\n    if (cfg.gradient !== \"none\") {\n      const defs = document.createElementNS(svgNS, \"defs\");\n      const g = document.createElementNS(svgNS, \"linearGradient\");\n      g.setAttribute(\"id\", \"spiralGradient\");\n      g.setAttribute(\"gradientUnits\", \"userSpaceOnUse\");\n      g.setAttribute(\"x1\", \"0%\");\n      g.setAttribute(\"y1\", \"0%\");\n      g.setAttribute(\"x2\", \"100%\");\n      g.setAttribute(\"y2\", \"100%\");\n      gradients[cfg.gradient].forEach((color, idx, arr) => {\n        const stop = document.createElementNS(svgNS, \"stop\");\n        stop.setAttribute(\"offset\", `${(idx * 100) / (arr.length - 1)}%`);\n        stop.setAttribute(\"stop-color\", color);\n        g.appendChild(stop);\n      });\n      defs.appendChild(g);\n      svg.appendChild(defs);\n    }\n\n    for (let i = 0; i < N; i++) {\n      const idx = i + 0.5;\n      const frac = idx / N;\n      const r = Math.sqrt(frac) * MAX_R;\n      const theta = idx * GOLDEN_ANGLE;\n      const x = CENTER + r * Math.cos(theta);\n      const y = CENTER + r * Math.sin(theta);\n\n      const c = document.createElementNS(svgNS, \"circle\");\n      c.setAttribute(\"cx\", x.toFixed(3));\n      c.setAttribute(\"cy\", y.toFixed(3));\n      c.setAttribute(\"r\", String(DOT));\n      c.setAttribute(\"fill\", cfg.gradient === \"none\" ? cfg.color : \"url(#spiralGradient)\");\n      c.setAttribute(\"opacity\", \"0.6\");\n\n      if (cfg.pulseEffect) {\n        const animR = document.createElementNS(svgNS, \"animate\");\n        animR.setAttribute(\"attributeName\", \"r\");\n        animR.setAttribute(\"values\", `${DOT * cfg.sizeMin};${DOT * cfg.sizeMax};${DOT * cfg.sizeMin}`);\n        animR.setAttribute(\"dur\", `${cfg.duration}s`);\n        animR.setAttribute(\"begin\", `${(frac * cfg.duration).toFixed(3)}s`);\n        animR.setAttribute(\"repeatCount\", \"indefinite\");\n        animR.setAttribute(\"calcMode\", \"spline\");\n        animR.setAttribute(\"keySplines\", \"0.4 0 0.6 1;0.4 0 0.6 1\");\n        c.appendChild(animR);\n\n        const animO = document.createElementNS(svgNS, \"animate\");\n        animO.setAttribute(\"attributeName\", \"opacity\");\n        animO.setAttribute(\"values\", `${cfg.opacityMin};${cfg.opacityMax};${cfg.opacityMin}`);\n        animO.setAttribute(\"dur\", `${cfg.duration}s`);\n        animO.setAttribute(\"begin\", `${(frac * cfg.duration).toFixed(3)}s`);\n        animO.setAttribute(\"repeatCount\", \"indefinite\");\n        animO.setAttribute(\"calcMode\", \"spline\");\n        animO.setAttribute(\"keySplines\", \"0.4 0 0.6 1;0.4 0 0.6 1\");\n        c.appendChild(animO);\n      }\n\n      svg.appendChild(c);\n    }\n\n    spiralRef.current.innerHTML = \"\";\n    spiralRef.current.appendChild(svg);\n  }, [cfg, gradients]);\n\n  // Randomizer with contrast awareness (b/w forward)\n  const randomize = () => {\n    const rand = (min: number, max: number) => Math.random() * (max - min) + min;\n    const lightColors = [\"#ffffff\"];\n    const darkColors = [\"#222222\", \"#111111\"];\n    const useLightBg = Math.random() > 0.5;\n\n    setCfg((c) => ({\n      ...c,\n      points: Math.floor(rand(300, 1600)),\n      dotRadius: rand(0.8, 3.2),\n      duration: rand(1.2, 7.5),\n      pulseEffect: Math.random() > 0.35,\n      opacityMin: rand(0.1, 0.4),\n      opacityMax: rand(0.6, 1.0),\n      sizeMin: rand(0.4, 0.9),\n      sizeMax: rand(1.2, 2.2),\n      background: useLightBg ? \"#f5f5f5\" : \"#000000\",\n      color: useLightBg\n        ? darkColors[Math.floor(Math.random() * darkColors.length)]\n        : lightColors[Math.floor(Math.random() * lightColors.length)],\n      gradient:\n        Math.random() > 0.6\n          ? ([\"rainbow\", \"ocean\", \"grayscale\", \"neon\"] as const)[\n              Math.floor(Math.random() * 4)\n            ]\n          : \"none\",\n    }));\n  };\n\n  // FAQ content (edit freely)\n  const faqs = [\n    {\n      q: \"What does your team do?\",\n      a: \"We design and build digital products end‑to‑end: research, UX/UI, front‑end/back‑end, infrastructure, and release support.\",\n    },\n    {\n      q: \"How is your workflow structured?\",\n      a: \"Iteratively. Solution storyboards → quick prototypes → user testing → prioritization → production integration. Transparent at every stage.\",\n    },\n    {\n      q: \"Which stack and tools do you use?\",\n      a: \"TypeScript/React/Next.js, Node.js, Python, Postgres, Redis, Tailwind, Playwright, CI/CD on GitHub Actions. Deployment — containers and clouds.\",\n    },\n    {\n      q: \"Can we see code or a demo?\",\n      a: \"Yes. We prepare private demo environments, give repository access and supply documented examples.\",\n    },\n    {\n      q: \"How do you estimate timelines and budgets?\",\n      a: \"We evaluate MVPs by impact metrics — value/complexity. We provide T‑shirt sizing bounds, then lock sprints with checkpoints.\",\n    },\n    {\n      q: \"Do you take over existing products?\",\n      a: \"Yes. We audit, clean up architecture/CI, eliminate debts, set up monitoring and take over under SLA.\",\n    },\n  ];\n\n  const filtered = query\n    ? faqs.filter(({ q, a }) => (q + a).toLowerCase().includes(query.toLowerCase()))\n    : faqs;\n\n  return (\n    <div\n      className=\"relative min-h-screen w-full overflow-hidden text-white\"\n      style={{ backgroundColor: cfg.background }}\n    >\n      {/* Background Spiral */}\n      <div\n        className=\"pointer-events-none absolute inset-0 flex items-center justify-center opacity-30 [mask-image:radial-gradient(circle_at_center,rgba(255,255,255,1),rgba(255,255,255,0.1)_60%,transparent_75%)]\"\n        style={{ mixBlendMode: \"screen\" }}\n      >\n        <div ref={spiralRef} />\n      </div>\n\n      {/* Layout */}\n      <div className=\"relative mx-auto max-w-5xl px-6 py-16\">\n        {/* Header */}\n        <header className=\"mb-10 flex items-end justify-between border-b border-white/20 pb-6\">\n          <div>\n            <h1 className=\"text-4xl md:text-6xl font-black tracking-tight\">FAQ</h1>\n            <p className=\"mt-2 text-sm md:text-base text-white/70\">\n              Clean, minimalistic, black‑and‑white.\n            </p>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <input\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              placeholder=\"Search questions…\"\n              className=\"h-10 w-56 rounded-xl border border-white/20 bg-transparent px-3 text-sm outline-none transition focus:border-white/60\"\n            />\n          </div>\n        </header>\n\n        {/* Content */}\n        <section className=\"relative\">\n          <div className=\"grid grid-cols-1 gap-3 md:grid-cols-2\">\n            {filtered.map((item, i) => (\n              <FAQItem key={i} q={item.q} a={item.a} index={i + 1} />\n            ))}\n          </div>\n        </section>\n\n        {/* Footer */}\n        <footer className=\"mt-16 border-t border-white/10 pt-6 text-xs text-white/50\">\n          © {new Date().getFullYear()} Your team — products that move metrics.\n        </footer>\n      </div>\n\n      {/* Control Panel */}\n      {panelOpen && (\n        <aside className=\"fixed right-4 top-4 z-20 w-[320px] rounded-2xl border border-white/15 bg-black/70 p-4 backdrop-blur\">\n          <h3 className=\"mb-3 text-sm font-semibold tracking-wide text-white/80\">Spiral Controls</h3>\n          <div className=\"space-y-3 text-xs\">\n            <Slider label=\"Points\" min={100} max={2000} step={50} value={cfg.points} onChange={(v)=> setCfg({...cfg, points: v})} />\n            <Slider label=\"Dot radius\" min={0.5} max={5} step={0.1} value={cfg.dotRadius} onChange={(v)=> setCfg({...cfg, dotRadius: v})} />\n            <Slider label=\"Duration\" min={1} max={10} step={0.1} value={cfg.duration} onChange={(v)=> setCfg({...cfg, duration: v})} />\n\n            <Toggle label=\"Pulse\" value={cfg.pulseEffect} onChange={(v)=> setCfg({...cfg, pulseEffect: v})} />\n            <Slider label=\"Opacity min\" min={0} max={1} step={0.05} value={cfg.opacityMin} onChange={(v)=> setCfg({...cfg, opacityMin: v})} />\n            <Slider label=\"Opacity max\" min={0} max={1} step={0.05} value={cfg.opacityMax} onChange={(v)=> setCfg({...cfg, opacityMax: v})} />\n            <Slider label=\"Size min\" min={0.1} max={2} step={0.1} value={cfg.sizeMin} onChange={(v)=> setCfg({...cfg, sizeMin: v})} />\n            <Slider label=\"Size max\" min={0.1} max={3} step={0.1} value={cfg.sizeMax} onChange={(v)=> setCfg({...cfg, sizeMax: v})} />\n\n            <Select\n              label=\"Gradient\"\n              value={cfg.gradient}\n              options={[\n                { label: \"None\", value: \"none\" },\n                { label: \"Rainbow\", value: \"rainbow\" },\n                { label: \"Sunset\", value: \"sunset\" },\n                { label: \"Ocean\", value: \"ocean\" },\n                { label: \"Fire\", value: \"fire\" },\n                { label: \"Neon\", value: \"neon\" },\n                { label: \"Pastel\", value: \"pastel\" },\n                { label: \"Grayscale\", value: \"grayscale\" },\n              ]}\n              onChange={(v)=> setCfg({...cfg, gradient: v as typeof cfg.gradient})}\n            />\n\n            <div className=\"flex gap-2\">\n              <button\n                onClick={randomize}\n                className=\"w-full rounded-xl border border-white/20 px-3 py-2 text-xs hover:border-white/50\"\n              >\n                Randomize (R)\n              </button>\n              <button\n                onClick={() => setPanelOpen(false)}\n                className=\"rounded-xl border border-white/20 px-3 py-2 text-xs hover:border-white/50\"\n              >\n                Close (H)\n              </button>\n            </div>\n          </div>\n        </aside>\n      )}\n    </div>\n  );\n}\n\nfunction FAQItem({ q, a, index }: { q: string; a: string; index: number }) {\n  const [open, setOpen] = useState(false);\n  return (\n    <div className=\"group relative overflow-hidden rounded-2xl border border-white/15 bg-black/40 p-5 transition hover:border-white/40\">\n      <button\n        onClick={() => setOpen((v) => !v)}\n        className=\"flex w-full items-center justify-between text-left\"\n        aria-expanded={open}\n      >\n        <div className=\"flex items-baseline gap-3\">\n          <span className=\"text-xs text-white/40\">{String(index).padStart(2, \"0\")}</span>\n          <h3 className=\"text-base md:text-lg font-semibold leading-tight\">{q}</h3>\n        </div>\n        <span className=\"ml-4 text-white/60 transition group-hover:text-white\">{open ? \"–\" : \"+\"}</span>\n      </button>\n      <div\n        className={`grid transition-[grid-template-rows] duration-300 ease-[cubic-bezier(.4,0,.2,1)] ${open ? \"mt-3 grid-rows-[1fr]\" : \"grid-rows-[0fr]\"}`}\n      >\n        <div className=\"min-h-0 overflow-hidden\">\n          <p className=\"text-sm text-white/70\">{a}</p>\n        </div>\n      </div>\n      {/* Hover halo */}\n      <div className=\"pointer-events-none absolute inset-0 opacity-0 group-hover:opacity-100\">\n        <div\n          className=\"absolute -inset-1 rounded-2xl border border-white/10\"\n          style={{ maskImage: \"radial-gradient(180px_180px_at_var(--x,50%)_var(--y,50%),white,transparent)\" }}\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction Slider({\n  label,\n  min,\n  max,\n  step,\n  value,\n  onChange,\n}: {\n  label: string;\n  min: number;\n  max: number;\n  step: number;\n  value: number;\n  onChange: (v: number) => void;\n}) {\n  return (\n    <label className=\"block\">\n      <div className=\"mb-1 flex items-center justify-between\">\n        <span>{label}</span>\n        <span className=\"tabular-nums text-white/50\">{value.toFixed(2)}</span>\n      </div>\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        step={step}\n        value={value}\n        onChange={(e) => onChange(parseFloat(e.target.value))}\n        className=\"w-full\"\n      />\n    </label>\n  );\n}\n\nfunction Toggle({ label, value, onChange }: { label: string; value: boolean; onChange: (v: boolean) => void }) {\n  return (\n    <label className=\"flex items-center justify-between\">\n      <span>{label}</span>\n      <button\n        onClick={() => onChange(!value)}\n        className={`h-6 w-10 rounded-full border border-white/20 transition ${value ? \"bg-white\" : \"bg-transparent\"}`}\n        aria-pressed={value}\n      >\n        <span className={`block h-5 w-5 translate-x-0.5 rounded-full bg-black transition ${value ? \"translate-x-4\" : \"translate-x-0\"}`} />\n      </button>\n    </label>\n  );\n}\n\nfunction Select({\n  label,\n  value,\n  options,\n  onChange,\n}: {\n  label: string;\n  value: string;\n  options: { label: string; value: string }[];\n  onChange: (v: string) => void;\n}) {\n  return (\n    <label className=\"block\">\n      <div className=\"mb-1\">{label}</div>\n      <div className=\"relative\">\n        <select\n          value={value}\n          onChange={(e) => onChange(e.target.value)}\n          className=\"w-full appearance-none rounded-xl border border-white/20 bg-black px-3 py-2 text-xs outline-none\"\n        >\n          {options.map((o) => (\n            <option key={o.value} value={o.value}>\n              {o.label}\n            </option>\n          ))}\n        </select>\n        <span className=\"pointer-events-none absolute right-3 top-1/2 -translate-y-1/2 text-white/50\">▾</span>\n      </div>\n    </label>\n  );\n}\n\n",
      "type": "registry:component"
    }
  ]
}