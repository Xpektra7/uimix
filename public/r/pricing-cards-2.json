{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pricing-cards-2",
  "type": "registry:block",
  "title": "Pricing Cards (Variation 2)",
  "description": "Dark minimal pricing with particles, accent lines and Radix switch toggle",
  "dependencies": [
    "lucide-react",
    "@radix-ui/react-switch"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/default/pricing-cards-2.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { ArrowRight, CircleCheck } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Switch } from \"@/components/ui/switch\";\n\ninterface PricingFeature {\n  text: string;\n}\ninterface PricingPlan {\n  id: string;\n  name: string;\n  description: string;\n  monthlyPrice: string;\n  yearlyPrice: string;\n  features: PricingFeature[];\n  button: {\n    text: string;\n    url: string;\n  };\n}\ninterface Pricing2Props {\n  heading?: string;\n  description?: string;\n  plans?: PricingPlan[];\n}\n\nconst Pricing2 = ({\n  heading = \"Plans & Pricing\",\n  description = \"Choose the plan that matches your workflow and scale with ease.\",\n  plans = [\n    {\n      id: \"starter\",\n      name: \"Starter\",\n      description: \"For individuals just getting started\",\n      monthlyPrice: \"$12\",\n      yearlyPrice: \"$9\",\n      features: [\n        { text: \"1 project\" },\n        { text: \"Basic analytics\" },\n        { text: \"Email support\" },\n        { text: \"500MB storage\" },\n      ],\n      button: {\n        text: \"Get Started\",\n        url: \"https://21st.dev\",\n      },\n    },\n    {\n      id: \"growth\",\n      name: \"Growth\",\n      description: \"For teams building serious products\",\n      monthlyPrice: \"$39\",\n      yearlyPrice: \"$29\",\n      features: [\n        { text: \"Unlimited projects\" },\n        { text: \"Team collaboration tools\" },\n        { text: \"Priority chat support\" },\n        { text: \"Advanced analytics\" },\n      ],\n      button: {\n        text: \"Upgrade Now\",\n        url: \"https://21st.dev\",\n      },\n    },\n  ],\n}: Pricing2Props) => {\n  const [isYearly, setIsYearly] = useState(false);\n\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas?.getContext(\"2d\");\n    if (!canvas || !ctx) return;\n\n    const setSize = () => {\n      const rect = canvas.parentElement?.getBoundingClientRect();\n      const w = Math.max(1, Math.floor(rect?.width ?? window.innerWidth));\n      const h = Math.max(1, Math.floor(rect?.height ?? window.innerHeight));\n      const dpr = Math.min(window.devicePixelRatio || 1, 2);\n      canvas.width = Math.floor(w * dpr);\n      canvas.height = Math.floor(h * dpr);\n      canvas.style.width = `${w}px`;\n      canvas.style.height = `${h}px`;\n      ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n    };\n    setSize();\n\n    type P = { x: number; y: number; v: number; o: number };\n    let parts: P[] = [];\n    let raf = 0;\n\n    const make = (): P => ({\n      x: Math.random() * (canvas.width / (window.devicePixelRatio || 1)),\n      y: Math.random() * (canvas.height / (window.devicePixelRatio || 1)),\n      v: Math.random() * 0.25 + 0.05,\n      o: Math.random() * 0.35 + 0.15,\n    });\n\n    const init = () => {\n      parts = [];\n      const w = canvas.width / (window.devicePixelRatio || 1);\n      const h = canvas.height / (window.devicePixelRatio || 1);\n      const count = Math.floor((w * h) / 12000);\n      for (let i = 0; i < count; i++) parts.push(make());\n    };\n\n    const draw = () => {\n      const w = canvas.width / (window.devicePixelRatio || 1);\n      const h = canvas.height / (window.devicePixelRatio || 1);\n      ctx.clearRect(0, 0, w, h);\n      parts.forEach((p) => {\n        p.y -= p.v;\n        if (p.y < 0) {\n          p.x = Math.random() * w;\n          p.y = h + Math.random() * 40;\n          p.v = Math.random() * 0.25 + 0.05;\n          p.o = Math.random() * 0.35 + 0.15;\n        }\n        ctx.fillStyle = `rgba(250,250,250,${p.o})`;\n        ctx.fillRect(p.x, p.y, 0.7, 2.2);\n      });\n      raf = requestAnimationFrame(draw);\n    };\n\n    const onResize = () => {\n      setSize();\n      init();\n    };\n\n    const ro = new ResizeObserver(onResize);\n    ro.observe(canvas.parentElement || document.body);\n\n    init();\n    raf = requestAnimationFrame(draw);\n    return () => {\n      ro.disconnect();\n      cancelAnimationFrame(raf);\n    };\n  }, []);\n\n  return (\n    <section\n      data-locked\n      className=\"relative min-h-screen py-24 md:py-32 bg-zinc-950 text-zinc-50 overflow-hidden isolate\"\n    >\n      <style>{`\n        :where(html, body, #__next){\n          margin:0; min-height:100%;\n          background:#0b0b0c; color:#f6f7f8; color-scheme:dark;\n          overflow-x:hidden; scrollbar-gutter:stable both-edges;\n        }\n        html{ background:#0b0b0c }\n        section[data-locked]{ color:#f6f7f8; color-scheme:dark }\n        .accent-lines{position:absolute;inset:0;pointer-events:none;opacity:.7}\n        .hline,.vline{position:absolute;background:#27272a}\n        .hline{left:0;right:0;height:1px;transform:scaleX(0);transform-origin:50% 50%;animation:drawX .6s ease forwards}\n        .vline{top:0;bottom:0;width:1px;transform:scaleY(0);transform-origin:50% 0%;animation:drawY .7s ease forwards}\n        .hline:nth-child(1){top:18%;animation-delay:.08s}\n        .hline:nth-child(2){top:50%;animation-delay:.16s}\n        .hline:nth-child(3){top:82%;animation-delay:.24s}\n        .vline:nth-child(4){left:18%;animation-delay:.20s}\n        .vline:nth-child(5){left:50%;animation-delay:.28s}\n        .vline:nth-child(6){left:82%;animation-delay:.36s}\n        @keyframes drawX{to{transform:scaleX(1)}}\n        @keyframes drawY{to{transform:scaleY(1)}}\n        .card-animate{opacity:0;transform:translateY(12px);animation:fadeUp .6s ease .25s forwards}\n        @keyframes fadeUp{to{opacity:1;transform:translateY(0)}}\n      `}</style>\n\n      <div className=\"pointer-events-none absolute inset-0 [background:radial-gradient(80%_60%_at_50%_15%,rgba(255,255,255,0.06),transparent_60%)]\" />\n\n      <div aria-hidden className=\"accent-lines\">\n        <div className=\"hline\" />\n        <div className=\"hline\" />\n        <div className=\"hline\" />\n        <div className=\"vline\" />\n        <div className=\"vline\" />\n        <div className=\"vline\" />\n      </div>\n\n      <canvas\n        ref={canvasRef}\n        className=\"absolute inset-0 w-full h-full opacity-50 pointer-events-none\"\n      />\n\n      <div className=\"relative container\">\n        <div className=\"mx-auto flex max-w-5xl flex-col items-center gap-6 text-center\">\n          <h2 className=\"text-pretty text-4xl font-bold lg:text-6xl\">{heading}</h2>\n          <p className=\"text-zinc-400 lg:text-xl\">{description}</p>\n\n          <div className=\"flex items-center gap-3 text-lg\">\n            Monthly\n            <Switch checked={isYearly} onCheckedChange={() => setIsYearly(!isYearly)} />\n            Yearly\n          </div>\n\n          <div className=\"mt-2 flex flex-col items-stretch gap-6 md:flex-row\">\n            {plans.map((plan, i) => (\n              <Card\n                key={plan.id}\n                className={`card-animate flex w-80 flex-col justify-between text-left border-zinc-800 bg-zinc-900/70 backdrop-blur supports-[backdrop-filter]:bg-zinc-900/60 ${\n                  i === 1 ? \"md:translate-y-2\" : \"\"\n                }`}\n                style={{ animationDelay: `${0.25 + i * 0.08}s` }}\n              >\n                <CardHeader>\n                  <CardTitle>\n                    <p className=\"text-zinc-50\">{plan.name}</p>\n                  </CardTitle>\n                  <p className=\"text-sm text-zinc-400\">{plan.description}</p>\n                  <span className=\"text-4xl font-bold text-white\">\n                    {isYearly ? plan.yearlyPrice : plan.monthlyPrice}\n                  </span>\n                  <p className=\"text-zinc-500\">\n                    Billed{\" \"}\n                    {isYearly\n                      ? `$${Number(plan.yearlyPrice.slice(1)) * 12}`\n                      : `$${Number(plan.monthlyPrice.slice(1)) * 12}`}{\" \"}\n                    annually\n                  </p>\n                </CardHeader>\n\n                <CardContent>\n                  <Separator className=\"mb-6 bg-zinc-800\" />\n                  {plan.id === \"growth\" && (\n                    <p className=\"mb-3 font-semibold text-zinc-200\">\n                      Everything in Starter, and:\n                    </p>\n                  )}\n                  <ul className=\"space-y-4\">\n                    {plan.features.map((feature, index) => (\n                      <li key={index} className=\"flex items-center gap-2 text-zinc-200\">\n                        <CircleCheck className=\"size-4 text-zinc-400\" />\n                        <span>{feature.text}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n\n                <CardFooter className=\"mt-auto\">\n                  <Button\n                    asChild\n                    className=\"w-full rounded-lg bg-zinc-100 text-zinc-900 hover:bg-zinc-200\"\n                  >\n                    <a href={plan.button.url} target=\"_blank\" rel=\"noreferrer\">\n                      {plan.button.text}\n                      <ArrowRight className=\"ml-2 size-4\" />\n                    </a>\n                  </Button>\n                </CardFooter>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Pricing2;\n",
      "type": "registry:component"
    }
  ]
}