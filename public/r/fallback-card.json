{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "fallback-card",
  "type": "registry:block",
  "title": "Fallback Card",
  "description": "Elegant fallback cards with animated glitch effects for unavailable content",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/default/fallback-card/fallback-card.tsx",
      "content": "'use client'\n\nimport React, { useRef, useEffect } from 'react'\n\nfunction cn(...classes: (string | undefined | null | false)[]) {\n  return classes.filter(Boolean).join(' ')\n}\n\n/* ────────────── LetterGlitch ────────────── */\nconst LetterGlitch = ({\n  glitchColors,\n  glitchSpeed = 50,\n  centerVignette = false,\n  outerVignette = true,\n  smooth = true,\n  characters = '.,:;-*#',\n  className = ''\n}: {\n  glitchColors: string[]\n  glitchSpeed?: number\n  centerVignette?: boolean\n  outerVignette?: boolean\n  smooth?: boolean\n  characters?: string\n  className?: string\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const animationRef = useRef<number | null>(null)\n  const letters = useRef<Array<{ char: string; color: string; targetColor: string; colorProgress: number }>>([])\n  const grid = useRef({ columns: 0, rows: 0 })\n  const context = useRef<CanvasRenderingContext2D | null>(null)\n  const lastGlitchTime = useRef(Date.now())\n\n  const lettersAndSymbols = Array.from(characters)\n  const fontSize = 16\n  const charWidth = 10\n  const charHeight = 20\n\n  const getRandomChar = () => lettersAndSymbols[Math.floor(Math.random() * lettersAndSymbols.length)]\n  const getRandomColor = () => glitchColors[Math.floor(Math.random() * glitchColors.length)]\n\n  const hexToRgb = (hex: string) => {\n    const shorthand = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i\n    hex = hex.replace(shorthand, (m, r, g, b) => r + r + g + g + b + b)\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n    return result ? { r: parseInt(result[1], 16), g: parseInt(result[2], 16), b: parseInt(result[3], 16) } : null\n  }\n\n  const interpolateColor = (s: { r: number; g: number; b: number }, e: { r: number; g: number; b: number }, f: number) =>\n    `rgb(${Math.round(s.r + (e.r - s.r) * f)}, ${Math.round(s.g + (e.g - s.g) * f)}, ${Math.round(\n      s.b + (e.b - s.b) * f\n    )})`\n\n  const calculateGrid = (w: number, h: number) => ({\n    columns: Math.ceil(w / charWidth),\n    rows: Math.ceil(h / charHeight)\n  })\n\n  const initializeLetters = (columns: number, rows: number) => {\n    grid.current = { columns, rows }\n    letters.current = Array.from({ length: columns * rows }, () => ({\n      char: getRandomChar(),\n      color: getRandomColor(),\n      targetColor: getRandomColor(),\n      colorProgress: 1\n    }))\n  }\n\n  const resizeCanvas = () => {\n    const canvas = canvasRef.current\n    if (!canvas) return\n    const parent = canvas.parentElement\n    if (!parent) return\n    const dpr = window.devicePixelRatio || 1\n    const rect = parent.getBoundingClientRect()\n    canvas.width = rect.width * dpr\n    canvas.height = rect.height * dpr\n    canvas.style.width = `${rect.width}px`\n    canvas.style.height = `${rect.height}px`\n    if (context.current) context.current.setTransform(dpr, 0, 0, dpr, 0, 0)\n    const { columns, rows } = calculateGrid(rect.width, rect.height)\n    initializeLetters(columns, rows)\n    drawLetters()\n  }\n\n  const drawLetters = () => {\n    if (!context.current) return\n    const ctx = context.current\n    const { width, height } = canvasRef.current!.getBoundingClientRect()\n    ctx.clearRect(0, 0, width, height)\n    ctx.font = `${fontSize}px monospace`\n    ctx.textBaseline = 'top'\n    letters.current.forEach((letter, i) => {\n      const x = (i % grid.current.columns) * charWidth\n      const y = Math.floor(i / grid.current.columns) * charHeight\n      ctx.fillStyle = letter.color\n      ctx.fillText(letter.char, x, y)\n    })\n  }\n\n  const updateLetters = () => {\n    const updateCount = Math.max(1, Math.floor(letters.current.length * 0.05))\n    for (let i = 0; i < updateCount; i++) {\n      const idx = Math.floor(Math.random() * letters.current.length)\n      if (!letters.current[idx]) continue\n      letters.current[idx].char = getRandomChar()\n      letters.current[idx].targetColor = getRandomColor()\n      if (!smooth) {\n        letters.current[idx].color = letters.current[idx].targetColor\n        letters.current[idx].colorProgress = 1\n      } else {\n        letters.current[idx].colorProgress = 0\n      }\n    }\n  }\n\n  const handleSmooth = () => {\n    let redraw = false\n    letters.current.forEach(l => {\n      if (l.colorProgress < 1) {\n        l.colorProgress += 0.05\n        if (l.colorProgress > 1) l.colorProgress = 1\n        const s = hexToRgb(l.color)\n        const e = hexToRgb(l.targetColor)\n        if (s && e) {\n          l.color = interpolateColor(s, e, l.colorProgress)\n          redraw = true\n        }\n      }\n    })\n    if (redraw) drawLetters()\n  }\n\n  const animate = () => {\n    const now = Date.now()\n    if (now - lastGlitchTime.current >= glitchSpeed) {\n      updateLetters()\n      drawLetters()\n      lastGlitchTime.current = now\n    }\n    if (smooth) handleSmooth()\n    animationRef.current = requestAnimationFrame(animate)\n  }\n\n  useEffect(() => {\n    const canvas = canvasRef.current\n    if (!canvas) return\n    context.current = canvas.getContext('2d')\n    resizeCanvas()\n    animate()\n    let resizeTimeout: NodeJS.Timeout\n    const handleResize = () => {\n      clearTimeout(resizeTimeout)\n      resizeTimeout = setTimeout(() => {\n        if (animationRef.current) cancelAnimationFrame(animationRef.current)\n        resizeCanvas()\n        animate()\n      }, 100)\n    }\n    window.addEventListener('resize', handleResize)\n    return () => {\n      if (animationRef.current) cancelAnimationFrame(animationRef.current)\n      window.removeEventListener('resize', handleResize)\n    }\n  }, [glitchSpeed, smooth])\n\n  return (\n    <div className={cn('relative w-full h-full overflow-hidden', className)}>\n      <canvas ref={canvasRef} className=\"block w-full h-full\" />\n      {outerVignette && (\n        <div className=\"absolute inset-0 pointer-events-none bg-[radial-gradient(circle,rgba(0,0,0,0)_60%,rgba(0,0,0,1)_100%)]\" />\n      )}\n      {centerVignette && (\n        <div className=\"absolute inset-0 pointer-events-none bg-[radial-gradient(circle,rgba(0,0,0,0.8)_0%,rgba(0,0,0,0)_60%)]\" />\n      )}\n    </div>\n  )\n}\n\n/* ────────────── FallbackCard ────────────── */\ninterface FallbackCardProps {\n  className?: string\n  message?: string\n  showIcon?: boolean\n  showGlitch?: boolean\n  theme?: 'dark' | 'light'\n  glitchOffsetX?: number\n  glitchOffsetY?: number\n  glitchScale?: number\n  cardWidth?: number\n  cardHeight?: number\n}\n\nexport function FallbackCard({\n  className,\n  message = 'Preview not available',\n  showIcon = true,\n  showGlitch = true,\n  theme = 'dark',\n  glitchOffsetX = 0,\n  glitchOffsetY = 0,\n  glitchScale = 1,\n  cardWidth,\n  cardHeight = 400\n}: FallbackCardProps) {\n  const glitchColors =\n    theme === 'dark'\n      ? ['#78b4ff', '#a0c4ff', '#c7d2fe', '#e0e7ff', '#f0f4ff']\n      : ['#374151', '#6b7280', '#9ca3af', '#d1d5db']\n\n  const baseBg = theme === 'dark' ? 'bg-black text-white/90' : 'bg-white text-black/80'\n\n  return (\n    <div\n      className={cn(\n        'w-full rounded-2xl border overflow-hidden shadow-lg',\n        baseBg,\n        className\n      )}\n      style={cardWidth ? { maxWidth: `${cardWidth}px` } : undefined}\n    >\n      <div \n        className=\"relative w-full overflow-hidden\"\n        style={{ height: `${cardHeight}px` }}\n      >\n        {showGlitch && (\n          <div \n            className=\"absolute inset-0 w-full h-full opacity-25 z-10\"\n            style={{\n              transform: `translate(${glitchOffsetX}px, ${glitchOffsetY}px) scale(${glitchScale})`,\n              transformOrigin: 'center center'\n            }}\n          >\n            <LetterGlitch glitchSpeed={50} centerVignette={false} outerVignette={false} smooth characters=\"₀₁. \" glitchColors={glitchColors} />\n            <div className=\"absolute inset-0 pointer-events-none\">\n              <div className=\"absolute top-0 left-0 w-full h-16 bg-gradient-to-b from-black/90 via-black/70 to-transparent blur-lg\"></div>\n              <div className=\"absolute bottom-0 left-0 w-full h-16 bg-gradient-to-t from-black/90 via-black/70 to-transparent blur-lg\"></div>\n              <div className=\"absolute top-0 left-0 w-16 h-full bg-gradient-to-r from-black/90 via-black/70 to-transparent blur-lg\"></div>\n              <div className=\"absolute top-0 right-0 w-16 h-full bg-gradient-to-l from-black/90 via-black/70 to-transparent blur-lg\"></div>\n            </div>\n          </div>\n        )}\n        \n        <div className=\"absolute inset-0 z-30 pointer-events-none\">\n          <div className=\"absolute inset-0 shadow-[inset_0_0_80px_rgba(0,0,0,0.8)]\"></div>\n        </div>\n\n        <div\n          className=\"absolute inset-0 z-0\"\n          style={{\n            background:\n              theme === 'dark'\n                ? 'radial-gradient(ellipse 80% 60% at 50% 50%, rgba(120, 180, 255, 0.15), transparent 70%), #000'\n                : 'radial-gradient(ellipse 80% 60% at 50% 50%, rgba(55,65,81,0.2), transparent 70%), #ffffff'\n          }}\n        />\n\n        <div className=\"relative z-20 flex flex-col items-center justify-center h-full p-6\">\n          {showIcon && (\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              className=\"w-10 h-10 mb-3 opacity-70 drop-shadow-[0_0_8px_rgba(156,163,175,0.3)]\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n            >\n              <rect x=\"2\" y=\"4\" width=\"20\" height=\"14\" rx=\"2\" ry=\"2\" />\n              <line x1=\"8\" y1=\"20\" x2=\"16\" y2=\"20\" />\n            </svg>\n          )}\n          <p className=\"text-sm font-bold text-center drop-shadow-[0_0_6px_rgba(229,231,235,0.2)]\">{message}</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n/* ────────────── Section Wrapper ────────────── */\nexport default function FallbackCardSection() {\n  return (\n    <section className=\"relative w-full min-h-screen bg-black text-white overflow-hidden\">\n      <div className=\"absolute inset-0 pointer-events-none bg-[radial-gradient(ellipse_80%_60%_at_50%_40%,rgba(120,180,255,0.08),transparent_70%)]\" />\n      \n      <div className=\"min-h-screen w-full flex items-center justify-center px-4 py-20\">\n        <div className=\"w-full max-w-[632px]\">\n          <FallbackCard\n            theme=\"dark\"\n            message=\"Preview not available\"\n            showIcon\n            showGlitch\n            glitchOffsetX={150}\n            glitchOffsetY={170}\n            glitchScale={1.6}\n            cardWidth={600}\n            cardHeight={550}\n          />\n        </div>\n      </div>\n    </section>\n  )\n}\n",
      "type": "registry:component"
    }
  ]
}